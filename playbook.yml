---
- name: Playbook to configure VMs/hosts with changes required to be a kubernetes node
  hosts:  all
  tasks:
    - name: Adding key and repo
      apt_key:
        url:  "{{ key_url }}"
        state:  present
    - apt_repository:
        repo: "{{ k8_repo }}"
        state: present

    - name: Installing required packages
      apt:
        name: "{{ packages }}"
        update_cache: yes
        cache_valid_time: 3600

    - name: Installing CNI on master node
      apt:
        name: "{{ cni_pkg }}"
        update_cache: yes
        cache_valid_time: 3600
      when: inventory_hostname in groups['master_node']
    
    - name: Backup fstab and disable swap
      lineinfile:
        path: /etc/fstab
        regexp: "swap"
        state: absent 
        backup: yes
    - command: "swapoff -a"

    - name: Load kernel modules
      modprobe:
        name: "{{ item }}"
        state:  present
      with_items: "{{ kern_mods }}"

    - name: Creating kernel system config files
      copy:
        src:  "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items: "{{ kern_config_files }}"
      notify:
        - load settings from system configuration files

    - name: Create containerd config directory and generate config file
      file:
        path: "{{ containerd_config_dir }}"
        state:  directory

    - shell:
        cmd:  "sudo containerd config default>/etc/containerd/config.toml"
      notify:
        - restart containerd

    - name: Enable kubelet
      service:
        name: kubelet
        state:  started
        enabled:  yes

    - name: Initialize Controlplane components
      shell:
        cmd:  "sudo kubeadm config images pull --cri-socket unix:///run/containerd/containerd.sock --kubernetes-version {{ k8_version }}"
      when: inventory_hostname in groups['master_node']
      
    - shell:
        cmd:  "kubeadm init --pod-network-cidr={{ pod_network }} --upload-certs --kubernetes-version={{ k8_version }}  --control-plane-endpoint=$(hostname) --cri-socket unix:///run/containerd/containerd.sock"
      register: cmd_out1

    - debug:
        var:  cmd_out1.stdout_lines
      when: inventory_hostname in groups['master_node']

    - name: Set kubeconfig location in master node
      shell:
        cmd:  "export KUBECONFIG=/etc/kubernetes/admin.conf && echo 'KUBECONFIG=/etc/kubernetes/admin.conf' >> /root/.bashrc"
      when: inventory_hostname in groups['master_node']
    - file:
        name: "{{ user_home }}/.kube"
        state:  directory
      become: False
      when: inventory_hostname in groups['master_node']
    - copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ user_home }}/.kube/config"

    - name: Print cluster join token
      shell:
        cmd:  "kubeadm token create --print-join-command"
      when: inventory_hostname in groups['master_node']
      register: token

    - name: Join worker node with master node
      shell:
        cmd:  "{{ token }}"
      when: master_node_count > 0 and inventory_hostname not in groups['master_node']


  handlers:
    - name: load settings from system configuration files
      shell:
        cmd:  "sysctl --system"

    - name: restart containerd
      service:
        name: containerd
        state: restarted
        enabled:  yes

